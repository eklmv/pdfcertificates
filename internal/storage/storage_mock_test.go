// Code generated by mockery v2.38.0. DO NOT EDIT.

package storage

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: id, cert, timestamp
func (_m *MockStorage) Add(id string, cert []byte, timestamp time.Time) error {
	ret := _m.Called(id, cert, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, time.Time) error); ok {
		r0 = rf(id, cert, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockStorage_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - id string
//   - cert []byte
//   - timestamp time.Time
func (_e *MockStorage_Expecter) Add(id interface{}, cert interface{}, timestamp interface{}) *MockStorage_Add_Call {
	return &MockStorage_Add_Call{Call: _e.mock.On("Add", id, cert, timestamp)}
}

func (_c *MockStorage_Add_Call) Run(run func(id string, cert []byte, timestamp time.Time)) *MockStorage_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(time.Time))
	})
	return _c
}

func (_c *MockStorage_Add_Call) Return(_a0 error) *MockStorage_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Add_Call) RunAndReturn(run func(string, []byte, time.Time) error) *MockStorage_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id, timestamp
func (_m *MockStorage) Delete(id string, timestamp time.Time) {
	_m.Called(id, timestamp)
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
//   - timestamp time.Time
func (_e *MockStorage_Expecter) Delete(id interface{}, timestamp interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", id, timestamp)}
}

func (_c *MockStorage_Delete_Call) Run(run func(id string, timestamp time.Time)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return() *MockStorage_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(string, time.Time)) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: id, timestamp
func (_m *MockStorage) Exists(id string, timestamp time.Time) bool {
	ret := _m.Called(id, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, time.Time) bool); ok {
		r0 = rf(id, timestamp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockStorage_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockStorage_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - id string
//   - timestamp time.Time
func (_e *MockStorage_Expecter) Exists(id interface{}, timestamp interface{}) *MockStorage_Exists_Call {
	return &MockStorage_Exists_Call{Call: _e.mock.On("Exists", id, timestamp)}
}

func (_c *MockStorage_Exists_Call) Run(run func(id string, timestamp time.Time)) *MockStorage_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockStorage_Exists_Call) Return(_a0 bool) *MockStorage_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Exists_Call) RunAndReturn(run func(string, time.Time) bool) *MockStorage_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id, timestamp
func (_m *MockStorage) Get(id string, timestamp time.Time) ([]byte, error) {
	ret := _m.Called(id, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time) ([]byte, error)); ok {
		return rf(id, timestamp)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time) []byte); ok {
		r0 = rf(id, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(id, timestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
//   - timestamp time.Time
func (_e *MockStorage_Expecter) Get(id interface{}, timestamp interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", id, timestamp)}
}

func (_c *MockStorage_Get_Call) Run(run func(id string, timestamp time.Time)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(cert []byte, err error) *MockStorage_Get_Call {
	_c.Call.Return(cert, err)
	return _c
}

func (_c *MockStorage_Get_Call) RunAndReturn(run func(string, time.Time) ([]byte, error)) *MockStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields:
func (_m *MockStorage) Load() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockStorage_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Load() *MockStorage_Load_Call {
	return &MockStorage_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockStorage_Load_Call) Run(run func()) *MockStorage_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Load_Call) Return(_a0 error) *MockStorage_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Load_Call) RunAndReturn(run func() error) *MockStorage_Load_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
