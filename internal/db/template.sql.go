// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: template.sql

package db

import (
	"context"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO template (content)
VALUES ($1)
RETURNING template_id, content
`

func (q *Queries) CreateTemplate(ctx context.Context, db DBTX, content string) (Template, error) {
	row := db.QueryRow(ctx, createTemplate, content)
	var i Template
	err := row.Scan(&i.TemplateID, &i.Content)
	return i, err
}

const deleteTemplate = `-- name: DeleteTemplate :one
DELETE FROM template
WHERE template_id = $1
RETURNING template_id, content
`

func (q *Queries) DeleteTemplate(ctx context.Context, db DBTX, templateID int32) (Template, error) {
	row := db.QueryRow(ctx, deleteTemplate, templateID)
	var i Template
	err := row.Scan(&i.TemplateID, &i.Content)
	return i, err
}

const getTemplate = `-- name: GetTemplate :one
SELECT template_id, content FROM template
WHERE template_id = $1
LIMIT 1
`

func (q *Queries) GetTemplate(ctx context.Context, db DBTX, templateID int32) (Template, error) {
	row := db.QueryRow(ctx, getTemplate, templateID)
	var i Template
	err := row.Scan(&i.TemplateID, &i.Content)
	return i, err
}

const listTemplates = `-- name: ListTemplates :many
SELECT template_id, content FROM template
ORDER BY template_id
LIMIT $1 OFFSET $2
`

type ListTemplatesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListTemplates(ctx context.Context, db DBTX, arg ListTemplatesParams) ([]Template, error) {
	rows, err := db.Query(ctx, listTemplates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(&i.TemplateID, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTemplatesLen = `-- name: ListTemplatesLen :one
SELECT count(*) FROM template
`

func (q *Queries) ListTemplatesLen(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRow(ctx, listTemplatesLen)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateTemplate = `-- name: UpdateTemplate :one
UPDATE template
SET content = $2
WHERE template_id = $1
RETURNING template_id, content
`

type UpdateTemplateParams struct {
	TemplateID int32
	Content    string
}

func (q *Queries) UpdateTemplate(ctx context.Context, db DBTX, arg UpdateTemplateParams) (Template, error) {
	row := db.QueryRow(ctx, updateTemplate, arg.TemplateID, arg.Content)
	var i Template
	err := row.Scan(&i.TemplateID, &i.Content)
	return i, err
}
