// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: course.sql

package db

import (
	"context"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (data)
VALUES ($1)
RETURNING course_id, data
`

func (q *Queries) CreateCourse(ctx context.Context, db DBTX, data []byte) (Course, error) {
	row := db.QueryRow(ctx, createCourse, data)
	var i Course
	err := row.Scan(&i.CourseID, &i.Data)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :one
DELETE FROM course
WHERE course_id = $1
RETURNING course_id, data
`

func (q *Queries) DeleteCourse(ctx context.Context, db DBTX, courseID int32) (Course, error) {
	row := db.QueryRow(ctx, deleteCourse, courseID)
	var i Course
	err := row.Scan(&i.CourseID, &i.Data)
	return i, err
}

const getCourse = `-- name: GetCourse :one
SELECT course_id, data FROM course
WHERE course_id = $1
LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, db DBTX, courseID int32) (Course, error) {
	row := db.QueryRow(ctx, getCourse, courseID)
	var i Course
	err := row.Scan(&i.CourseID, &i.Data)
	return i, err
}

const listCourses = `-- name: ListCourses :many
SELECT course_id, data FROM course
ORDER BY course_id
LIMIT $1 OFFSET $2
`

type ListCoursesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListCourses(ctx context.Context, db DBTX, arg ListCoursesParams) ([]Course, error) {
	rows, err := db.Query(ctx, listCourses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(&i.CourseID, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE course
SET data = $2
WHERE course_id = $1
RETURNING course_id, data
`

type UpdateCourseParams struct {
	CourseID int32
	Data     []byte
}

func (q *Queries) UpdateCourse(ctx context.Context, db DBTX, arg UpdateCourseParams) (Course, error) {
	row := db.QueryRow(ctx, updateCourse, arg.CourseID, arg.Data)
	var i Course
	err := row.Scan(&i.CourseID, &i.Data)
	return i, err
}
