// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: student.sql

package db

import (
	"context"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO student (data)
VALUES (coalesce($1, '{}'::jsonb))
RETURNING student_id, data
`

func (q *Queries) CreateStudent(ctx context.Context, db DBTX, data []byte) (Student, error) {
	row := db.QueryRow(ctx, createStudent, data)
	var i Student
	err := row.Scan(&i.StudentID, &i.Data)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :one
DELETE FROM student
WHERE student_id = $1
RETURNING student_id, data
`

func (q *Queries) DeleteStudent(ctx context.Context, db DBTX, studentID int32) (Student, error) {
	row := db.QueryRow(ctx, deleteStudent, studentID)
	var i Student
	err := row.Scan(&i.StudentID, &i.Data)
	return i, err
}

const getStudent = `-- name: GetStudent :one
SELECT student_id, data FROM student
WHERE student_id = $1
LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, db DBTX, studentID int32) (Student, error) {
	row := db.QueryRow(ctx, getStudent, studentID)
	var i Student
	err := row.Scan(&i.StudentID, &i.Data)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT student_id, data FROM student
ORDER BY student_id
LIMIT $1 OFFSET $2
`

type ListStudentsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListStudents(ctx context.Context, db DBTX, arg ListStudentsParams) ([]Student, error) {
	rows, err := db.Query(ctx, listStudents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.StudentID, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE student
SET data = coalesce($2, '{}'::jsonb)
WHERE student_id = $1
RETURNING student_id, data
`

type UpdateStudentParams struct {
	StudentID int32
	Data      []byte
}

func (q *Queries) UpdateStudent(ctx context.Context, db DBTX, arg UpdateStudentParams) (Student, error) {
	row := db.QueryRow(ctx, updateStudent, arg.StudentID, arg.Data)
	var i Student
	err := row.Scan(&i.StudentID, &i.Data)
	return i, err
}
