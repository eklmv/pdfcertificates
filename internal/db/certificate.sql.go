// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: certificate.sql

package db

import (
	"context"
)

const createCertificate = `-- name: CreateCertificate :one
INSERT INTO certificate (template_id, course_id, student_id, data)
VALUES ($1, $2, $3, coalesce($4, '{}'::jsonb))
RETURNING certificate_id, template_id, course_id, student_id, timestamp, data
`

type CreateCertificateParams struct {
	TemplateID int32
	CourseID   int32
	StudentID  int32
	Data       []byte
}

func (q *Queries) CreateCertificate(ctx context.Context, db DBTX, arg CreateCertificateParams) (Certificate, error) {
	row := db.QueryRow(ctx, createCertificate,
		arg.TemplateID,
		arg.CourseID,
		arg.StudentID,
		arg.Data,
	)
	var i Certificate
	err := row.Scan(
		&i.CertificateID,
		&i.TemplateID,
		&i.CourseID,
		&i.StudentID,
		&i.Timestamp,
		&i.Data,
	)
	return i, err
}

const deleteCertificate = `-- name: DeleteCertificate :one
DELETE FROM certificate
WHERE certificate_id = $1
RETURNING certificate_id, template_id, course_id, student_id, timestamp, data
`

func (q *Queries) DeleteCertificate(ctx context.Context, db DBTX, certificateID string) (Certificate, error) {
	row := db.QueryRow(ctx, deleteCertificate, certificateID)
	var i Certificate
	err := row.Scan(
		&i.CertificateID,
		&i.TemplateID,
		&i.CourseID,
		&i.StudentID,
		&i.Timestamp,
		&i.Data,
	)
	return i, err
}

const getCertificate = `-- name: GetCertificate :one
SELECT certificate_id, template_id, course_id, student_id, timestamp, data FROM certificate
WHERE certificate_id = $1
LIMIT 1
`

func (q *Queries) GetCertificate(ctx context.Context, db DBTX, certificateID string) (Certificate, error) {
	row := db.QueryRow(ctx, getCertificate, certificateID)
	var i Certificate
	err := row.Scan(
		&i.CertificateID,
		&i.TemplateID,
		&i.CourseID,
		&i.StudentID,
		&i.Timestamp,
		&i.Data,
	)
	return i, err
}

const listCertificates = `-- name: ListCertificates :many
SELECT certificate_id, template_id, course_id, student_id, timestamp, data FROM certificate
ORDER BY certificate_id
LIMIT $1 OFFSET $2
`

type ListCertificatesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListCertificates(ctx context.Context, db DBTX, arg ListCertificatesParams) ([]Certificate, error) {
	rows, err := db.Query(ctx, listCertificates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.CertificateID,
			&i.TemplateID,
			&i.CourseID,
			&i.StudentID,
			&i.Timestamp,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCertificatesByCourse = `-- name: ListCertificatesByCourse :many
SELECT certificate_id, template_id, course_id, student_id, timestamp, data FROM certificate
WHERE course_id = $1
ORDER BY certificate_id
LIMIT $2 OFFSET $3
`

type ListCertificatesByCourseParams struct {
	CourseID int32
	Limit    int64
	Offset   int64
}

func (q *Queries) ListCertificatesByCourse(ctx context.Context, db DBTX, arg ListCertificatesByCourseParams) ([]Certificate, error) {
	rows, err := db.Query(ctx, listCertificatesByCourse, arg.CourseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.CertificateID,
			&i.TemplateID,
			&i.CourseID,
			&i.StudentID,
			&i.Timestamp,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCertificatesByStudent = `-- name: ListCertificatesByStudent :many
SELECT certificate_id, template_id, course_id, student_id, timestamp, data FROM certificate
WHERE student_id = $1
ORDER BY certificate_id
LIMIT $2 OFFSET $3
`

type ListCertificatesByStudentParams struct {
	StudentID int32
	Limit     int64
	Offset    int64
}

func (q *Queries) ListCertificatesByStudent(ctx context.Context, db DBTX, arg ListCertificatesByStudentParams) ([]Certificate, error) {
	rows, err := db.Query(ctx, listCertificatesByStudent, arg.StudentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.CertificateID,
			&i.TemplateID,
			&i.CourseID,
			&i.StudentID,
			&i.Timestamp,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCertificatesByTemplate = `-- name: ListCertificatesByTemplate :many
SELECT certificate_id, template_id, course_id, student_id, timestamp, data FROM certificate
WHERE template_id = $1
ORDER BY certificate_id
LIMIT $2 OFFSET $3
`

type ListCertificatesByTemplateParams struct {
	TemplateID int32
	Limit      int64
	Offset     int64
}

func (q *Queries) ListCertificatesByTemplate(ctx context.Context, db DBTX, arg ListCertificatesByTemplateParams) ([]Certificate, error) {
	rows, err := db.Query(ctx, listCertificatesByTemplate, arg.TemplateID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Certificate
	for rows.Next() {
		var i Certificate
		if err := rows.Scan(
			&i.CertificateID,
			&i.TemplateID,
			&i.CourseID,
			&i.StudentID,
			&i.Timestamp,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCertificate = `-- name: UpdateCertificate :one
UPDATE certificate
SET data = coalesce($2, '{}'::jsonb)
WHERE certificate_id = $1
RETURNING certificate_id, template_id, course_id, student_id, timestamp, data
`

type UpdateCertificateParams struct {
	CertificateID string
	Data          []byte
}

func (q *Queries) UpdateCertificate(ctx context.Context, db DBTX, arg UpdateCertificateParams) (Certificate, error) {
	row := db.QueryRow(ctx, updateCertificate, arg.CertificateID, arg.Data)
	var i Certificate
	err := row.Scan(
		&i.CertificateID,
		&i.TemplateID,
		&i.CourseID,
		&i.StudentID,
		&i.Timestamp,
		&i.Data,
	)
	return i, err
}
